name: Validate Infrastructure

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive tofu/
        continue-on-error: false

      - name: Terraform Validate (AWS EKS)
        run: |
          echo "Validating AWS EKS module..."
          cd tofu/modules/aws-eks
          terraform init -backend=false
          terraform validate
          cd -

      - name: Terraform Validate (Azure AKS)
        run: |
          echo "Validating Azure AKS module..."
          cd tofu/modules/azure-aks
          terraform init -backend=false
          terraform validate
          cd -

      - name: Terraform Validate (GCP GKE)
        run: |
          echo "Validating GCP GKE module..."
          cd tofu/modules/gcp-gke
          terraform init -backend=false
          terraform validate
          cd -

      - name: Terraform Validate (K3s on-prem)
        run: |
          echo "Validating K3s on-prem module..."
          cd tofu/modules/on-prem-k3s
          terraform init -backend=false
          terraform validate
          cd -

      - name: Terraform Validate (k3d local)
        run: |
          echo "Validating k3d local module..."
          cd tofu/modules/k3d-local
          terraform init -backend=false
          terraform validate
          cd -

  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Lint Monobase API Chart
        run: |
          echo "Linting Monobase API chart..."
          helm lint charts/api

      - name: Lint API Worker Chart
        run: |
          echo "Linting API Worker chart..."
          helm lint charts/api

      - name: Lint Monobase Account Chart
        run: |
          echo "Linting Monobase Account chart..."
          helm lint charts/account

      - name: Template Test (Production)
        run: |
          echo "Testing template rendering with production values..."
          helm template test charts/api \
            --values config/example.com/values-production.yaml \
            --dry-run > /dev/null
          echo "✓ Production template renders successfully"

      - name: Template Test (Staging)
        run: |
          echo "Testing template rendering with staging values..."
          helm template test charts/api \
            --values config/example.com/values-staging.yaml \
            --dry-run > /dev/null
          echo "✓ Staging template renders successfully"

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Lint YAML files
        run: |
          echo "Linting YAML files..."
          find . -name "*.yaml" -o -name "*.yml" | \
            grep -v ".git" | \
            grep -v "node_modules" | \
            xargs yamllint -c .yamllint || true

  shell-check:
    name: Shell Script Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: warning

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [terraform-validate, helm-lint, yaml-lint, shell-check, security-scan]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "All validation checks completed"
          echo "Terraform: ${{ needs.terraform-validate.result }}"
          echo "Helm: ${{ needs.helm-lint.result }}"
          echo "YAML: ${{ needs.yaml-lint.result }}"
          echo "Shell: ${{ needs.shell-check.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
