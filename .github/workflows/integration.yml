name: Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  k3d-full-stack:
    name: k3d Full Stack Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          k3d version

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Create k3d cluster
        run: |
          echo "Creating k3d cluster for testing..."
          k3d cluster create lfh-test \
            --agents 2 \
            --port "80:80@loadbalancer" \
            --port "443:443@loadbalancer" \
            --wait

          echo "Waiting for cluster to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=2m

          echo "✓ Cluster created successfully"
          kubectl get nodes

      - name: Deploy infrastructure components
        run: |
          echo "Deploying Envoy Gateway..."
          kubectl apply -f infrastructure/envoy-gateway/

          echo "Deploying cert-manager..."
          kubectl apply -f infrastructure/cert-manager/

          echo "Deploying namespaces..."
          kubectl apply -f infrastructure/namespaces/

          echo "Waiting for infrastructure to be ready..."
          kubectl wait --for=condition=Available \
            --all deployments \
            --all-namespaces \
            --timeout=5m || true

      - name: Deploy HapiHub (core)
        run: |
          echo "Deploying HapiHub with staging config..."
          helm install hapihub charts/hapihub \
            --values config/example.com/values-staging.yaml \
            --namespace example-staging \
            --create-namespace \
            --wait \
            --timeout 10m

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."

          # Check if pods are running
          kubectl get pods -n example-staging

          # Check if HapiHub pods are ready
          kubectl wait --for=condition=Ready \
            pod -l app=hapihub \
            -n example-staging \
            --timeout=5m

          echo "✓ All pods are running"

          # Check services
          kubectl get svc -n example-staging

          echo "✓ Smoke tests passed"

      - name: Test MongoDB connection
        run: |
          echo "Testing MongoDB connectivity..."

          # Get MongoDB pod
          MONGO_POD=$(kubectl get pod -n example-staging \
            -l app.kubernetes.io/name=mongodb \
            -o jsonpath='{.items[0].metadata.name}')

          if [ -n "$MONGO_POD" ]; then
            echo "MongoDB pod: $MONGO_POD"
            kubectl exec -n example-staging $MONGO_POD -- \
              mongosh --eval "db.adminCommand('ping')" || true
          else
            echo "⚠️ MongoDB not deployed (optional dependency)"
          fi

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Collecting logs..."
          kubectl get all --all-namespaces
          kubectl describe pods --all-namespaces
          kubectl logs -n example-staging -l app=hapihub --tail=100 || true

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up k3d cluster..."
          k3d cluster delete lfh-test

  integration-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [k3d-full-stack]
    if: always()
    steps:
      - name: Report results
        run: |
          echo "Integration test results:"
          echo "k3d Full Stack: ${{ needs.k3d-full-stack.result }}"

          if [ "${{ needs.k3d-full-stack.result }}" == "success" ]; then
            echo "✓ All integration tests passed"
          else
            echo "❌ Integration tests failed"
            exit 1
          fi
