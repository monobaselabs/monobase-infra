# Staging Configuration Example
# Complete staging reference for staging.example.com
# Optimized for testing and validation with lower resource requirements

global:
  domain: staging.example.com
  namespace: example-staging
  environment: staging

  gateway:
    name: shared-gateway
    namespace: gateway-system

  storage:
    provider: cloud-default
    className: ""

# ===== ArgoCD GitOps Configuration =====
argocd:
  # Git repository URL (required for GitOps)
  repoURL: https://github.com/monobaselabs/monobase-infra.git  # Change to your fork
  targetRevision: main  # Branch to deploy from (main, staging, etc.)

# ===== CORE: Monobase API =====
api:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/api
    tag: "latest"  # OK for staging (use branch builds)
    pullPolicy: Always  # Always pull latest for staging

  replicas: 1  # Single replica for staging

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 2Gi

  gateway:
    hostname: ""  # Empty = uses api.{global.domain}

  livenessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10

  readinessProbe:
    enabled: true
    path: /ready
    initialDelaySeconds: 10
    periodSeconds: 5

  podDisruptionBudget:
    enabled: false  # Not needed for single replica

  autoscaling:
    enabled: false  # Disabled for staging

# ===== CORE: Monobase Account Frontend =====
account:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/accountapp
    tag: "latest"
    pullPolicy: Always

  replicas: 1

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  gateway:
    hostname: ""

  podDisruptionBudget:
    enabled: false

# ===== CORE: PostgreSQL Database =====
postgresql:
  enabled: true

  # Staging uses standalone mode (no replication)
  architecture: standalone
  replicaCount: 1

  auth:
    enabled: true

  persistence:
    enabled: true
    storageClass: ""
    size: 20Gi  # Smaller for staging

  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits:
      cpu: 2
      memory: 4Gi

# ===== OPTIONAL: Valkey (Redis Cache) =====
valkey:
  enabled: true

  architecture: standalone  # No replication for staging

  master:
    persistence:
      enabled: false  # Disabled for staging (faster cleanup)

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 250m
      memory: 256Mi

# ===== OPTIONAL: MinIO (Object Storage) =====
minio:
  enabled: false  # Usually disabled (use cloud S3)

# ===== STAGING: Mailpit Enabled =====
mailpit:
  enabled: true  # Enable for email testing

  resources:
    requests:
      cpu: 50m
      memory: 50Mi
    limits:
      cpu: 200m
      memory: 200Mi

  gateway:
    hostname: mail.{global.domain}  # Web UI for viewing test emails

# ===== External Secrets =====
externalSecrets:
  enabled: true
  provider: aws

# ===== Monitoring =====
monitoring:
  enabled: false  # Usually disabled to save resources

# ===== Backup =====
backup:
  enabled: false  # Usually disabled for staging

# ===== Security =====
networkPolicies:
  enabled: true  # Always enabled for security
  defaultDeny: true

podSecurityStandards:
  enabled: true
  level: restricted

# Security tools (optional - usually disabled in staging to save resources)
security:
  kyverno:
    enabled: false  # Usually disabled in staging (GitOps already provides guardrails)

    # Kyverno configuration (applies if enabled) - lower resources for staging
    replicaCount: 1  # Single replica for staging

    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 256Mi

    podDisruptionBudget:
      enabled: false

    admissionController:
      replicas: 1
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 256Mi

    backgroundController:
      enabled: true
      replicas: 1
      resources:
        requests:
          cpu: 25m
          memory: 32Mi
        limits:
          cpu: 100m
          memory: 128Mi

    cleanupController:
      enabled: true
      resources:
        requests:
          cpu: 25m
          memory: 32Mi
        limits:
          cpu: 100m
          memory: 64Mi

    reportsController:
      enabled: true
      resources:
        requests:
          cpu: 25m
          memory: 32Mi
        limits:
          cpu: 100m
          memory: 128Mi

    webhooksCleanup:
      enabled: true

    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 1000
      seccompProfile:
        type: RuntimeDefault

    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true

    metricsService:
      create: true
      type: ClusterIP
      port: 8000
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"

    serviceMonitor:
      enabled: false
      namespace: kyverno
      interval: 30s

    features:
      generateValidatingAdmissionPolicy:
        enabled: false
      logging:
        format: json
        verbosity: 2

    config:
      excludeKyvernoNamespace: true
      resourceFilters:
      - '[Event,*,*]'
      - '[*,kube-system,*]'
      - '[*,kube-public,*]'
      - '[*,kube-node-lease,*]'
      - '[*,kyverno,*]'
      - '[*,velero,*]'
      - '[*,argocd,*]'
      - '[*,cert-manager,*]'
      - '[*,external-secrets-system,*]'
      - '[*,longhorn-system,*]'
      - '[*,monitoring,*]'
      - '[*,falco,*]'
      - '[Node,*,*]'
      - '[APIService,*,*]'
      - '[TokenReview,*,*]'
      - '[SubjectAccessReview,*,*]'
      - '[SelfSubjectAccessReview,*,*]'
      - '[Binding,*,*]'
      - '[ReplicaSet,*,*]'
      - '[AdmissionReport,*,*]'
      - '[ClusterAdmissionReport,*,*]'
      - '[BackgroundScanReport,*,*]'
      - '[ClusterBackgroundScanReport,*,*]'

    admissionReports:
      enabled: true

    backgroundReports:
      enabled: true

    webhookTimeout: 10

    upgradeController:
      enabled: true

    crds:
      install: true
      annotations: {}

  falco:
    enabled: false  # Usually disabled in staging (save resources, not production data)

    # Falco configuration (applies if enabled) - lower resources for staging
    daemonset:
      updateStrategy:
        type: RollingUpdate

    resources:
      requests:
        cpu: 50m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 1000
      seccompProfile:
        type: RuntimeDefault

    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
        add:
        - SYS_PTRACE
      readOnlyRootFilesystem: true
      privileged: false

    falco:
      rulesFile:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/rules.d

      priority: warning  # Higher threshold for staging (reduce noise)

      jsonOutput: true
      jsonIncludeOutputProperty: true
      jsonIncludeTagsProperty: true

      logStderr: true
      logSyslog: false
      logLevel: info

      webserver:
        enabled: true
        port: 8765
        prometheus_metrics_enabled: true

      syscall_event_drops:
        actions:
        - log
        rate: 0.05
        max_burst: 500

      fileOutput:
        enabled: true
        keepAlive: false
        filename: /var/log/falco/events.log

      syslogOutput:
        enabled: false

      httpOutput:
        enabled: false
        url: ""
        userAgent: "falco/0.1"

      programOutput:
        enabled: false
        keepAlive: false
        program: ""

      grpc:
        enabled: false
        bindAddress: "unix:///run/falco/falco.sock"
        threadiness: 0

    driver:
      enabled: true
      kind: ebpf
      ebpf:
        hostNetwork: true
        path: /usr/src/ebpf

    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists

    nodeSelector: {}

    serviceAccount:
      create: true
      annotations: {}

    rbac:
      create: true

    podSecurityPolicy:
      create: false

    customRules: {}

    extraVolumes:
    - name: custom-rules
      configMap:
        name: falco-custom-rules

    extraVolumeMounts:
    - name: custom-rules
      mountPath: /etc/falco/rules.d
      readOnly: true

    services:
    - name: metrics
      type: ClusterIP
      ports:
      - port: 8765
        targetPort: 8765
        protocol: TCP
        name: metrics

    serviceMonitor:
      enabled: false
      interval: 30s
      scrapeTimeout: 10s

# ===== Resource Quotas =====
resourceQuotas:
  enabled: false
