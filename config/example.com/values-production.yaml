# Production Configuration for example.com
# This is a REFERENCE configuration - copy to config/yourclient/ and customize

global:
  # Base domain for all services (can be overridden per service)
  domain: example.com

  # Namespace for this deployment ({client}-{env} pattern)
  namespace: example-prod

  # Environment identifier
  environment: production

  # Shared Gateway reference (deployed once in gateway-system namespace)
  gateway:
    name: shared-gateway
    namespace: gateway-system

  # Storage configuration
  storage:
    # Storage provider selection
    provider: cloud-default  # Options: cloud-default, longhorn, ebs-csi, azure-disk, gcp-pd, local-path
    # cloud-default: Use cluster's default StorageClass (EBS on EKS, Azure Disk on AKS, etc.)
    # longhorn: Deploy Longhorn distributed storage (for on-prem)
    # ebs-csi: AWS EBS CSI Driver with gp3
    # azure-disk: Azure Disk CSI Driver
    # gcp-pd: GCP Persistent Disk CSI
    # local-path: For k3d/kind local testing

    # StorageClass name (empty = auto-detect based on provider)
    className: ""
    # Examples:
    # - cloud-default: "" (uses cluster default)
    # - longhorn: "longhorn"
    # - ebs-csi: "gp3"
    # - local-path: "local-path"

# ===== REQUIRED CORE: HapiHub API =====
hapihub:
  enabled: true

  image:
    repository: ghcr.io/mycurelabs/hapihub
    tag: "5.215.2"  # ✅ ALWAYS pin specific version in production
    pullPolicy: IfNotPresent

  # High availability - minimum 2 replicas
  replicas: 3

  resources:
    requests:
      cpu: 1
      memory: 2Gi
    limits:
      cpu: 2
      memory: 4Gi

  # Gateway configuration
  gateway:
    hostname: ""  # Empty = uses api.{global.domain} → api.example.com
    # Or set explicitly for different domain: "api.custom-domain.com"

  # Application configuration (via ConfigMap)
  config:
    NODE_ENV: production
    LOG_LEVEL: info
    # Database connection (from secrets)
    # S3 configuration (from secrets or ConfigMap)

  # Health checks
  livenessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: true
    path: /ready
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 2

  # Pod Disruption Budget for HA
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# ===== REQUIRED CORE: MyCureApp Frontend =====
mycureapp:
  enabled: true

  image:
    repository: ghcr.io/mycurelabs/mycureapp
    tag: "1.0.0"  # ✅ Pin specific version
    pullPolicy: IfNotPresent

  replicas: 2

  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi

  gateway:
    hostname: ""  # Empty = uses app.{global.domain} → app.example.com

  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# ===== OPTIONAL: Syncd Sync Service =====
syncd:
  enabled: true  # Enable for offline/mobile sync

  image:
    repository: ghcr.io/mycurelabs/syncd
    tag: "1.2.0"  # ✅ Pin version

  replicas: 2

  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 2Gi

  gateway:
    hostname: ""  # Empty = uses sync.{global.domain}

  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# ===== REQUIRED CORE: MongoDB Database =====
mongodb:
  enabled: true

  # Bitnami MongoDB chart configuration
  architecture: replicaset
  replicaCount: 3  # ✅ Production requires 3-node replica set

  auth:
    enabled: true
    # Credentials from External Secrets

  persistence:
    enabled: true
    storageClass: longhorn
    size: 100Gi  # Adjust based on data volume

  resources:
    requests:
      cpu: 1.5
      memory: 6Gi
    limits:
      cpu: 3
      memory: 8Gi

  # Encryption at rest
  encryption:
    enabled: true
    keyFile: ""  # From External Secrets

  # TLS for connections
  tls:
    enabled: true

  # Backup configuration
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention: 30  # 30 days

  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2  # At least 2 replicas always available

# ===== OPTIONAL: Typesense Search =====
typesense:
  enabled: true  # Enable for full-text search

  replicas: 3  # HA for production

  persistence:
    enabled: true
    storageClass: longhorn
    size: 50Gi

  resources:
    requests:
      cpu: 750m
      memory: 1.5Gi
    limits:
      cpu: 2
      memory: 3Gi

  backup:
    enabled: true
    schedule: "0 3 * * *"
    retention: 30

# ===== OPTIONAL: MinIO Object Storage =====
minio:
  enabled: true  # Enable for self-hosted S3 (or set false for AWS S3)

  # Bitnami MinIO chart configuration
  mode: distributed  # Production uses distributed mode
  replicas: 6  # 6 nodes for 1TB usable with EC:2 erasure coding

  persistence:
    enabled: true
    storageClass: longhorn
    size: 250Gi  # Per node: 6 × 250Gi = 1.5TB raw → ~1TB usable

  resources:
    requests:
      cpu: 1.5
      memory: 3Gi
    limits:
      cpu: 3
      memory: 6Gi

  gateway:
    hostname: ""  # Empty = uses storage.{global.domain}
    # Or use CDN: "cdn.example.com"

  # Rate limiting for public access
  rateLimit:
    enabled: true
    requestsPerSecond: 100
    burst: 200

    # If using external S3 instead:
    # external:
    #   endpoint: "s3.amazonaws.com"
    #   bucket: "hapihub-production-files"
    #   region: "us-east-1"
    #   publicUrl: "https://cdn.example.com"

# ===== PRODUCTION: NO Mailpit =====
mailpit:
  enabled: false  # ❌ NEVER enable Mailpit in production

  # Use real SMTP instead (configured via secrets):
  # - SendGrid
  # - AWS SES
  # - Postmark
  # - etc.

# ===== External Secrets Operator Configuration =====
externalSecrets:
  enabled: true

  # Choose your secrets provider
  provider: aws  # Options: aws, azure, gcp, sops

  # Provider-specific configuration
  aws:
    region: us-east-1
    secretStore: example-prod-secretstore

  # Secret mappings (see secrets-mapping.yaml for details)
  secrets: []  # Populated from secrets-mapping.yaml

# ===== Monitoring (Optional - Enable for Production) =====
monitoring:
  enabled: false  # Set true when needed (adds ~3-5% resource overhead)

  prometheus:
    retention: 15d
    storage: 50Gi

    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

    # Alert rules
    alerts:
      enabled: true
      # See infrastructure/monitoring/prometheus-rules.yaml

  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 10Gi

    # Pre-configured dashboards
    dashboards:
      - kubernetes-cluster
      - mongodb
      - hapihub
      - minio

  alertmanager:
    enabled: true
    config:
      receivers:
        - name: slack
          slackWebhook: ""  # From External Secrets
        - name: pagerduty
          pagerdutyKey: ""  # From External Secrets

# ===== Backup Configuration (Velero) =====
backup:
  enabled: true  # ✅ Critical for production

  # S3 bucket for backups
  s3Bucket: example-prod-backups
  region: us-east-1

  # Encryption
  encryption:
    enabled: true
    kmsKeyId: ""  # AWS KMS key for backup encryption

  # Velero backup schedules
  schedules:
    # Hourly critical data (72h retention)
    hourly:
      enabled: true
      schedule: "0 * * * *"
      retention: 72h
      includedNamespaces:
        - example-prod

    # Daily full backup (30d retention)
    daily:
      enabled: true
      schedule: "0 2 * * *"
      retention: 720h  # 30 days
      includedNamespaces:
        - example-prod
      snapshotVolumes: true

    # Weekly archive (90d retention)
    weekly:
      enabled: true
      schedule: "0 3 * * 0"
      retention: 2160h  # 90 days
      storageLocation: archive  # Cold storage bucket

# ===== Network Policies =====
networkPolicies:
  enabled: true  # ✅ REQUIRED for production

  # Default deny all traffic
  defaultDeny: true

  # Allow specific patterns
  allowRules:
    - gateway-to-apps
    - apps-to-db
    - apps-to-storage
    - apps-to-typesense

  # Deny cross-namespace traffic
  denyCrossNamespace: true

# ===== Pod Security Standards =====
podSecurityStandards:
  enabled: true  # ✅ REQUIRED for production
  level: restricted  # Highest security level

# ===== Autoscaling =====
autoscaling:
  enabled: true  # ✅ Enable HPA for production

  hapihub:
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilization: 70
    targetMemoryUtilization: 80

  mycureapp:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilization: 70

  syncd:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilization: 70

# ===== Resource Quotas =====
resourceQuotas:
  enabled: true

  limits:
    cpu: "50"
    memory: "100Gi"
    persistentvolumeclaims: "20"
    pods: "100"

# ===== HIPAA Compliance =====
hipaa:
  enabled: true  # ✅ Enable HIPAA controls

  # Audit logging
  auditLogging:
    enabled: true
    retention: 2555d  # 7 years for HIPAA

  # Access controls
  accessControls:
    enabled: true
    mfa: required

  # Encryption requirements
  encryption:
    atRest: required
    inTransit: required

  # BAA requirements
  baa:
    signed: true  # Document BAA with cloud provider
