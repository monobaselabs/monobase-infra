# Secrets Mapping Configuration for example.com
# This is a REFERENCE - copy to config/yourclient/ and customize with your KMS paths

# This file maps Kubernetes secret keys to your KMS (Key Management Service) secret paths
# Supported providers: AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, SOPS

# ===== Provider Configuration =====
provider: aws  # Options: aws, azure, gcp, sops

# AWS Secrets Manager Configuration
aws:
  region: us-east-1
  secretStore: example-prod-secretstore  # SecretStore resource name

  # IAM role for External Secrets Operator (via IRSA)
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/example-prod-external-secrets

# Azure Key Vault Configuration (if using Azure)
azure:
  vaultUrl: https://example-prod-kv.vault.azure.net/
  tenantId: "00000000-0000-0000-0000-000000000000"

  # Managed Identity or Service Principal
  auth:
    type: ManagedIdentity  # Or: ServicePrincipal
    clientId: "00000000-0000-0000-0000-000000000000"

# GCP Secret Manager Configuration (if using GCP)
gcp:
  projectId: example-prod-123456

  # Workload Identity
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: external-secrets@example-prod-123456.iam.gserviceaccount.com

# SOPS Configuration (if using SOPS encrypted files)
sops:
  provider: aws  # Options: aws, gcp, azure, age
  kmsKeyArn: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012

# ===== Secret Mappings =====

# MongoDB Secrets
mongodb:
  - secretKey: mongodb-root-password
    remoteKey: example/prod/mongodb/root-password
    # AWS: ARN or name
    # Azure: secret name in vault
    # GCP: projects/PROJECT_ID/secrets/SECRET_NAME/versions/latest

  - secretKey: mongodb-replica-set-key
    remoteKey: example/prod/mongodb/replica-set-key

  - secretKey: mongodb-encryption-key
    remoteKey: example/prod/mongodb/encryption-key
    # Used for encryption at rest

# HapiHub Application Secrets
hapihub:
  - secretKey: DATABASE_URL
    remoteKey: example/prod/hapihub/database-url
    # MongoDB connection string

  - secretKey: JWT_SECRET
    remoteKey: example/prod/hapihub/jwt-secret
    # JWT signing key

  - secretKey: JWT_REFRESH_SECRET
    remoteKey: example/prod/hapihub/jwt-refresh-secret

  - secretKey: ENCRYPTION_KEY
    remoteKey: example/prod/hapihub/encryption-key
    # Application-level encryption key

  - secretKey: S3_ACCESS_KEY_ID
    remoteKey: example/prod/hapihub/s3-access-key
    # MinIO or AWS S3 access key

  - secretKey: S3_SECRET_ACCESS_KEY
    remoteKey: example/prod/hapihub/s3-secret-key

  - secretKey: SMTP_PASSWORD
    remoteKey: example/prod/hapihub/smtp-password
    # Email service password (SendGrid, AWS SES, etc.)

  - secretKey: TWILIO_AUTH_TOKEN
    remoteKey: example/prod/hapihub/twilio-auth-token
    # SMS service (if used)

  - secretKey: STRIPE_SECRET_KEY
    remoteKey: example/prod/hapihub/stripe-secret-key
    # Payment processing (if used)

# Syncd Secrets
syncd:
  - secretKey: DATABASE_URL
    remoteKey: example/prod/syncd/database-url

  - secretKey: JWT_SECRET
    remoteKey: example/prod/hapihub/jwt-secret
    # Same as HapiHub for token validation

  - secretKey: SYNC_SECRET_KEY
    remoteKey: example/prod/syncd/sync-secret-key
    # Syncd-specific encryption key

# MinIO Secrets (if self-hosted)
minio:
  - secretKey: root-user
    remoteKey: example/prod/minio/root-user
    # MinIO admin username

  - secretKey: root-password
    remoteKey: example/prod/minio/root-password
    # MinIO admin password

# Typesense Secrets
typesense:
  - secretKey: admin-api-key
    remoteKey: example/prod/typesense/admin-api-key

  - secretKey: search-api-key
    remoteKey: example/prod/typesense/search-api-key

# TLS Certificates (if not using cert-manager)
tls:
  - secretKey: tls.crt
    remoteKey: example/prod/tls/wildcard-cert
    # Wildcard certificate for *.example.com

  - secretKey: tls.key
    remoteKey: example/prod/tls/wildcard-key
    # Certificate private key

# Monitoring Secrets (if enabled)
grafana:
  - secretKey: admin-password
    remoteKey: example/prod/grafana/admin-password

alertmanager:
  - secretKey: slack-webhook-url
    remoteKey: example/prod/alertmanager/slack-webhook

  - secretKey: pagerduty-key
    remoteKey: example/prod/alertmanager/pagerduty-key

# Velero Backup Secrets
velero:
  - secretKey: cloud
    remoteKey: example/prod/velero/aws-credentials
    # AWS credentials for S3 backup access
    # Content format:
    # [default]
    # aws_access_key_id=AKIAIOSFODNN7EXAMPLE
    # aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# ===== Example Secret Paths by Provider =====

# AWS Secrets Manager Examples:
# - Simple path: "example/prod/mongodb/root-password"
# - Full ARN: "arn:aws:secretsmanager:us-east-1:123456789012:secret:example/prod/mongodb/root-password-AbCdEf"
# - JSON field: "example/prod/database" with jsonKey: "password"

# Azure Key Vault Examples:
# - Secret name: "mongodb-root-password"
# - Secret URI: "https://example-prod-kv.vault.azure.net/secrets/mongodb-root-password/latest"

# GCP Secret Manager Examples:
# - Resource name: "projects/example-prod-123456/secrets/mongodb-root-password/versions/latest"
# - Short form: "mongodb-root-password" (latest version)

# SOPS Encrypted Files Examples:
# - File path: "secrets/prod/mongodb.enc.yaml"
# - Key in file: "root-password"

# ===== Notes =====

# 1. NEVER commit actual secret values to Git
# 2. Use KMS for all secrets management
# 3. Rotate secrets regularly (90 days for production)
# 4. Use different secrets for staging and production
# 5. Enable audit logging for secret access
# 6. Follow least-privilege principle for KMS access

# 7. Secret Creation:
#    - Create secrets in your KMS BEFORE deploying
#    - Use strong, randomly generated values
#    - Document secret rotation procedures
#    - Maintain secret inventory

# 8. HIPAA Compliance:
#    - All secrets must be encrypted at rest in KMS
#    - Enable KMS audit logging
#    - Restrict KMS access via IAM policies
#    - Document all PHI-related secrets
#    - Include in BAA with cloud provider
