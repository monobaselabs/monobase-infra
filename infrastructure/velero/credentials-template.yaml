# Velero Credentials Template
# How to create the velero-credentials secret for different cloud providers

# ============================================================================
# AWS - IRSA Authentication (Recommended - No static credentials needed)
# ============================================================================
# When using AWS EKS with IRSA, Velero automatically uses the IAM role
# No credential secret is required!
# 
# The terraform module creates the IAM role: ${cluster_name}-velero
# The role ARN is output as: velero_role_arn
# 
# Velero pod automatically assumes this role via IRSA - no action needed!

# ============================================================================
# Azure - Workload Identity (Recommended - No static credentials needed)
# ============================================================================
# When using Azure AKS with Workload Identity, Velero automatically uses
# the Managed Identity
# No credential secret is required!
#
# The terraform module creates the Managed Identity: ${cluster_name}-velero
# The client ID is output as: velero_identity_client_id
#
# Velero pod automatically uses this identity - no action needed!

# ============================================================================
# GCP - Workload Identity (Recommended - No static credentials needed)
# ============================================================================
# When using GCP GKE with Workload Identity, Velero automatically uses
# the Service Account
# No credential secret is required!
#
# The terraform module creates the Service Account: ${cluster_name}-velero
# The email is output as: velero_service_account_email
#
# Velero pod automatically uses this SA - no action needed!

# ============================================================================
# DigitalOcean Spaces - Static Credentials Required
# ============================================================================
# For DigitalOcean, you need to create Spaces access keys and store them
# in a Kubernetes secret OR use External Secrets Operator

# Option 1: Manual Secret Creation
# ---------------------------------
# Create the secret manually:
#
# kubectl create secret generic velero-credentials \
#   --namespace velero \
#   --from-literal=cloud="[default]
# aws_access_key_id=YOUR_SPACES_ACCESS_KEY
# aws_secret_access_key=YOUR_SPACES_SECRET_KEY"

# Option 2: External Secrets (Recommended)
# -----------------------------------------
# Store credentials in your secret manager and use External Secrets:
#
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: velero-credentials
#   namespace: velero
# spec:
#   secretStoreRef:
#     name: aws-secretstore  # or your configured SecretStore
#     kind: ClusterSecretStore
#   target:
#     name: velero-credentials
#     template:
#       data:
#         cloud: |
#           [default]
#           aws_access_key_id={{ .spacesAccessKey }}
#           aws_secret_access_key={{ .spacesSecretKey }}
#   data:
#     - secretKey: spacesAccessKey
#       remoteRef:
#         key: monobase/digitalocean/spaces
#         property: access_key
#     - secretKey: spacesSecretKey
#       remoteRef:
