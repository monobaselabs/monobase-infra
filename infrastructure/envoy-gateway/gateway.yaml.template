# Shared Gateway - Single HTTPS Listener
# This is a TEMPLATE - replace {{ .Values.* }} with actual values

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: shared-gateway
  namespace: gateway-system
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  gatewayClassName: envoy-gateway
  
  listeners:
    # Single HTTPS listener - handles ALL hostnames via HTTPRoutes
    - name: https
      port: 443
      protocol: HTTPS
      hostname: "*.{{ .Values.global.domain }}"  # Wildcard for all subdomains
      
      allowedRoutes:
        namespaces:
          from: All  # Allow HTTPRoutes from any namespace
      
      tls:
        mode: Terminate
        certificateRefs:
          - kind: Secret
            name: wildcard-tls-{{ .Values.global.domain | replace "." "-" }}
            namespace: gateway-system
    
    # Optional: HTTP listener for redirect to HTTPS
    - name: http
      port: 80
      protocol: HTTP
      hostname: "*.{{ .Values.global.domain }}"
      
      allowedRoutes:
        namespaces:
          from: All

---
# HTTPRoute for HTTP -> HTTPS Redirect
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http-to-https-redirect
  namespace: gateway-system
spec:
  parentRefs:
    - name: shared-gateway
      namespace: gateway-system
      sectionName: http
  
  hostnames:
    - "*.{{ .Values.global.domain }}"
  
  rules:
    - filters:
        - type: RequestRedirect
          requestRedirect:
            scheme: https
            statusCode: 301

---
# Why a single HTTPS listener?
#
# 1. Zero-downtime client onboarding:
#    - HTTPRoutes are added dynamically via xDS
#    - No Gateway restart needed
#    - No connection drops
#
# 2. Hostname flexibility:
#    - HTTPRoutes specify exact hostnames
#    - Gateway accepts all via wildcard
#    - Easy to add custom domains
#
# 3. TLS certificate options:
#    
#    Option A: Wildcard certificate (recommended)
#    - Single cert for *.example.com
#    - Simple management
#    - Works for all subdomains
#    
#    Option B: Per-route certificates
#    - HTTPRoute specifies certificateRef
#    - More flexible (different domains)
#    - More complex management
#
# 4. Adding new clients/services:
#    - Just create HTTPRoute in client namespace
#    - Specify hostname (api.client.com)
#    - Reference shared-gateway
#    - Zero downtime!

---
# Example: Client adds HTTPRoute
#
# apiVersion: gateway.networking.k8s.io/v1
# kind: HTTPRoute
# metadata:
#   name: hapihub
#   namespace: client-prod
# spec:
#   parentRefs:
#     - name: shared-gateway
#       namespace: gateway-system
#   hostnames:
#     - api.client.com
#   rules:
#     - backendRefs:
#         - name: hapihub
#           port: 7500

---
# TLS Certificate Management
#
# Option 1: cert-manager (automatic)
# - Gateway annotation: cert-manager.io/cluster-issuer: letsencrypt-prod
# - cert-manager watches Gateway
# - Automatically creates/renews certificates
#
# Option 2: Manual (bring your own cert)
# - Create Secret with tls.crt and tls.key
# - Reference in Gateway certificateRefs
#
# Option 3: External Secrets (from KMS)
# - Store cert in AWS Secrets Manager / Azure Key Vault
# - ExternalSecret syncs to K8s Secret
# - Reference in Gateway certificateRefs
