# ArgoCD UI Access via Gateway API
# Template - replace {{ .Values.* }} with actual values

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/component: server
spec:
  parentRefs:
    - name: shared-gateway
      namespace: gateway-system
  
  hostnames:
    - argocd.{{ .Values.global.domain }}
  
  rules:
    # gRPC traffic (ArgoCD CLI)
    - matches:
        - headers:
            - name: Content-Type
              value: application/grpc
      backendRefs:
        - name: argocd-server
          port: 80
          weight: 1
    
    # HTTP traffic (Web UI and API)
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: argocd-server
          port: 80
          weight: 1

---
# ReferenceGrant to allow cross-namespace access
# ArgoCD in 'argocd' namespace, Gateway in 'gateway-system'
apiVersion: gateway.networking.k8s.io/v1beta1
kind: ReferenceGrant
metadata:
  name: argocd-to-gateway
  namespace: argocd
spec:
  from:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      namespace: argocd
  to:
    - group: ""
      kind: Service
      name: argocd-server

---
# Access Instructions:
#
# 1. Get admin password:
#    kubectl -n argocd get secret argocd-initial-admin-secret \
#      -o jsonpath="{.data.password}" | base64 -d
#
# 2. Access UI:
#    https://argocd.example.com
#
# 3. Login:
#    Username: admin
#    Password: (from step 1)
#
# 4. Change admin password:
#    argocd account update-password
#
# 5. CLI login:
#    argocd login argocd.example.com --grpc-web
#
# 6. Deploy applications:
#    kubectl apply -f argocd/bootstrap/root-app.yaml

---
# Security Considerations:
#
# 1. TLS:
#    - Gateway terminates TLS
#    - ArgoCD server runs with --insecure flag
#    - Certificate managed by cert-manager
#
# 2. Authentication:
#    - Change default admin password immediately
#    - Enable SSO (Dex) for production
#    - Use RBAC for team access
#
# 3. Authorization:
#    - Configure ArgoCD RBAC policies
#    - Limit project access per team
#    - Use AppProjects for isolation
#
# 4. Network Policy:
#    - Restrict ingress to Gateway only
#    - Restrict egress to Git repos + K8s API
#
# 5. Audit Logging:
#    - Enable audit logs in ArgoCD
#    - Ship logs to SIEM
#    - Monitor failed login attempts
