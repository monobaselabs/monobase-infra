# RBAC Service Accounts (Least Privilege)
# Each application gets its own service account with minimal permissions

---
# HapiHub Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: api
  annotations:
    # For AWS IRSA (if HapiHub needs direct AWS access)
    # eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/api-role

---
# Syncd Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-worker
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: api-worker

---
# MyCureApp Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: account
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: account

---
# External Secrets Service Account (for KMS access)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: external-secrets
  annotations:
    # AWS IRSA
    eks.amazonaws.com/role-arn: {{ .Values.externalSecrets.aws.roleArn }}
    # GCP Workload Identity
    # iam.gke.io/gcp-service-account: external-secrets@project.iam.gserviceaccount.com
    # Azure Workload Identity
    # azure.workload.identity/client-id: "00000000-0000-0000-0000-000000000000"

---
# Why separate service accounts?
#
# 1. Least privilege principle
# 2. Each app has only permissions it needs
# 3. Limits blast radius of compromised pod
# 4. Easier to audit permissions
# 5. HIPAA access control requirement
#
# Default service accounts are NOT used (security best practice)
