# RBAC Role Bindings
# Bind service accounts to their roles

---
# HapiHub RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: api
subjects:
  - kind: ServiceAccount
    name: api
    namespace: {{ .Values.global.namespace }}

---
# Syncd RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-worker
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: api-worker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: api-worker
subjects:
  - kind: ServiceAccount
    name: api-worker
    namespace: {{ .Values.global.namespace }}

---
# MyCureApp RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: account
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: account
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: account
subjects:
  - kind: ServiceAccount
    name: account
    namespace: {{ .Values.global.namespace }}

---
# External Secrets RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: external-secrets
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-secrets
subjects:
  - kind: ServiceAccount
    name: external-secrets
    namespace: {{ .Values.global.namespace }}

---
# Verify RBAC:
# kubectl auth can-i get secrets --as=system:serviceaccount:myclient-prod:api -n myclient-prod
# # Should return: yes
#
# kubectl auth can-i delete pods --as=system:serviceaccount:myclient-prod:api -n myclient-prod
# # Should return: no
