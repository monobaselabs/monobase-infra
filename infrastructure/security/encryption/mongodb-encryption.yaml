# MongoDB Encryption at Rest Configuration
# HIPAA Requirement: All PHI must be encrypted at rest

---
# MongoDB Encryption Key Secret
# This secret contains the encryption key for MongoDB's encrypted storage engine
# IMPORTANT: Store this in External Secrets (KMS), not in Git!

apiVersion: v1
kind: Secret
metadata:
  name: mongodb-encryption-key
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    encryption: at-rest
type: Opaque
data:
  # Base64-encoded encryption key (created by External Secrets)
  # Must be exactly 32 bytes (256 bits) before base64 encoding
  # Generate: openssl rand -base64 32
  mongodb-keyfile: ""  # From External Secrets

---
# MongoDB Configuration for Encryption
# Add to mongodb values in helm-dependencies/mongodb-values.yaml:
#
# encryption:
#   enabled: true
#   keyFile: /opt/bitnami/mongodb/conf/mongodb.key
#   existingSecret: mongodb-encryption-key
#
# Or via mongod.conf:
# security:
#   enableEncryption: true
#   encryptionKeyFile: /opt/bitnami/mongodb/conf/mongodb.key

---
# TLS/SSL Configuration for MongoDB
# Encryption in transit between clients and MongoDB

apiVersion: v1
kind: Secret
metadata:
  name: mongodb-tls
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    encryption: in-transit
type: kubernetes.io/tls
data:
  # TLS certificate and key (from External Secrets or cert-manager)
  tls.crt: ""  # Base64-encoded certificate
  tls.key: ""  # Base64-encoded private key
  ca.crt: ""   # Base64-encoded CA certificate

---
# MongoDB TLS Configuration
# Add to mongodb values:
#
# tls:
#   enabled: true
#   mode: requireTLS
#   existingSecret: mongodb-tls
#   certificatesSecret: mongodb-tls
#   certFilename: tls.crt
#   certKeyFilename: tls.key
#   certCAFilename: ca.crt

---
# ExternalSecret for Encryption Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mongodb-encryption-key
  namespace: {{ .Values.global.namespace }}
spec:
  secretStoreRef:
    name: {{ .Values.global.namespace }}-secretstore
    kind: SecretStore
  refreshInterval: 24h  # Refresh daily
  target:
    name: mongodb-encryption-key
    creationPolicy: Owner
  data:
    - secretKey: mongodb-keyfile
      remoteRef:
        key: {{ .Values.global.namespace }}/mongodb/encryption-key

---
# Key Rotation Procedure:
#
# MongoDB encryption keys should be rotated periodically (every 90 days)
#
# 1. Create new encryption key in KMS:
#    aws secretsmanager create-secret \
#      --name myclient/prod/mongodb/encryption-key-v2 \
#      --secret-string "$(openssl rand -base64 32)"
#
# 2. Add new key to MongoDB keyfile (supports multiple keys):
#    # MongoDB can have multiple keys for rotation
#
# 3. Re-encrypt data with new key (requires maintenance window):
#    # This is complex - consult MongoDB docs
#
# 4. Remove old key after re-encryption complete
#
# 5. Update External Secrets to use new key

---
# HIPAA Compliance Checklist:
#
# ✅ Encryption at rest enabled
# ✅ Encryption in transit (TLS) enabled
# ✅ Encryption keys stored in KMS (not in Git)
# ✅ Key rotation procedure documented
# ✅ Access to encryption keys restricted (IAM)
# ✅ Audit logging enabled for key access
# ✅ Backup encryption enabled (separate keys)
#
# For full compliance:
# - Document encryption in System Security Plan
# - Include in BAA with cloud provider
# - Perform annual security assessments
# - Maintain key inventory
# - Test restore procedures with encrypted backups
