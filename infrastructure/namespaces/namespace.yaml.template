# Namespace Template with Security Controls
# Template - replace {{ .Values.* }} with actual values

apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.global.namespace }}
  labels:
    # Namespace identification
    name: {{ .Values.global.namespace }}
    environment: {{ .Values.global.environment }}
    client: {{ .Values.global.namespace | replace "-prod" "" | replace "-staging" "" | replace "-dev" "" }}
    
    # Pod Security Standards (Restricted Profile)
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: latest
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest
    
    # Metadata for policies
    kubernetes.io/metadata.name: {{ .Values.global.namespace }}
  
  annotations:
    # Description
    description: "{{ .Values.global.namespace }} - Healthcare application deployment"
    
    # Contact information
    contact: "{{ .Values.global.contact | default \"admin@example.com\" }}"
    
    # Created by
    created-by: monobase-infrastructure-template
    created-at: "{{ now | date \"2006-01-02\" }}"

---
# ResourceQuota for namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{ .Values.global.namespace }}-quota
  namespace: {{ .Values.global.namespace }}
spec:
  hard:
    # Compute resources
    requests.cpu: "{{ .Values.resourceQuotas.limits.cpu | default \"50\" }}"
    requests.memory: "{{ .Values.resourceQuotas.limits.memory | default \"100Gi\" }}"
    limits.cpu: "{{ .Values.resourceQuotas.limits.cpu | default \"50\" }}"
    limits.memory: "{{ .Values.resourceQuotas.limits.memory | default \"100Gi\" }}"
    
    # Storage
    persistentvolumeclaims: "{{ .Values.resourceQuotas.limits.persistentvolumeclaims | default \"20\" }}"
    requests.storage: "{{ .Values.resourceQuotas.limits.storage | default \"2Ti\" }}"
    
    # Object counts
    pods: "{{ .Values.resourceQuotas.limits.pods | default \"100\" }}"
    services: "{{ .Values.resourceQuotas.limits.services | default \"50\" }}"
    secrets: "{{ .Values.resourceQuotas.limits.secrets | default \"100\" }}"
    configmaps: "{{ .Values.resourceQuotas.limits.configmaps | default \"100\" }}"

---
# LimitRange for default resource limits
apiVersion: v1
kind: LimitRange
metadata:
  name: {{ .Values.global.namespace }}-limits
  namespace: {{ .Values.global.namespace }}
spec:
  limits:
    # Default limits for containers (if not specified)
    - type: Container
      default:
        cpu: 500m
        memory: 512Mi
      defaultRequest:
        cpu: 100m
        memory: 128Mi
      max:
        cpu: "8"
        memory: 16Gi
      min:
        cpu: 10m
        memory: 64Mi
    
    # Limits for PVCs
    - type: PersistentVolumeClaim
      max:
        storage: 500Gi
      min:
        storage: 1Gi

---
# Usage:
# kubectl apply -f namespace.yaml
#
# Verify PSS labels:
# kubectl get namespace {{ .Values.global.namespace }} --show-labels
#
# Verify resource quotas:
# kubectl describe resourcequota -n {{ .Values.global.namespace }}
#
# Check resource usage:
# kubectl describe namespace {{ .Values.global.namespace }}

---
# Notes:
# 1. Namespace created automatically by ArgoCD (syncPolicy.syncOptions.CreateNamespace)
# 2. This template used for manual creation or pre-deployment setup
# 3. ResourceQuota prevents runaway resource usage
# 4. LimitRange provides sensible defaults
# 5. PSS labels enforce security at namespace level
