# AWS Secrets Manager SecretStore
# Template - replace {{ .Values.* }} with actual values

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{ .Values.global.namespace }}-secretstore
  namespace: {{ .Values.global.namespace }}
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.externalSecrets.aws.region | default "us-east-1" }}
      
      # Authentication via IRSA (IAM Roles for Service Accounts)
      # Recommended for EKS
      auth:
        jwt:
          serviceAccountRef:
            name: {{ .Values.externalSecrets.serviceAccount | default "default" }}

---
# Alternative: Cluster-wide SecretStore (optional)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secretsmanager-global
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.externalSecrets.aws.region }}
      
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets
            namespace: external-secrets-system

---
# ServiceAccount with IRSA annotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.externalSecrets.serviceAccount | default "default" }}
  namespace: {{ .Values.global.namespace }}
  annotations:
    eks.amazonaws.com/role-arn: {{ .Values.externalSecrets.aws.roleArn }}

---
# IAM Role Policy (create via Terraform/CloudFormation):
#
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#         "secretsmanager:GetSecretValue",
#         "secretsmanager:DescribeSecret"
#       ],
#       "Resource": [
#         "arn:aws:secretsmanager:us-east-1:123456789012:secret:myclient/prod/*"
#       ]
#     }
#   ]
# }

---
# Trust Relationship for IRSA:
#
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Federated": "arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE"
#       },
#       "Action": "sts:AssumeRoleWithWebIdentity",
#       "Condition": {
#         "StringEquals": {
#           "oidc.eks.us-east-1.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub": "system:serviceaccount:myclient-prod:default"
#         }
#       }
#     }
#   ]
# }

---
# Example ExternalSecret usage:
#
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: mongodb-credentials
#   namespace: myclient-prod
# spec:
#   secretStoreRef:
#     name: myclient-prod-secretstore
#     kind: SecretStore
#   target:
#     name: mongodb-credentials
#     creationPolicy: Owner
#   data:
#     - secretKey: root-password
#       remoteRef:
#         key: myclient/prod/mongodb/root-password
#     - secretKey: replica-set-key
#       remoteRef:
#         key: myclient/prod/mongodb/replica-set-key

---
# Secret naming convention:
# {client}/{environment}/{service}/{secret-name}
# Examples:
# - myclient/prod/mongodb/root-password
# - myclient/prod/api/jwt-secret
# - myclient/prod/minio/access-key

---
# Setup Instructions:
#
# 1. Create IAM role with trust policy for IRSA
# 2. Attach policy allowing secretsmanager:GetSecretValue
# 3. Create secrets in AWS Secrets Manager
# 4. Annotate ServiceAccount with role ARN
# 5. Create SecretStore in namespace
# 6. Create ExternalSecret resources
# 7. Verify: kubectl get externalsecrets -n myclient-prod
