# kube-prometheus-stack Helm Values
# Chart: https://github.com/prometheus-community/helm-charts
# Version: 56.x+

# Full monitoring stack: Prometheus + Grafana + Alertmanager + Exporters

# Global settings
fullnameOverride: monitoring

# Prometheus Operator
prometheusOperator:
  enabled: true
  
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault

# Prometheus Server
prometheus:
  enabled: true
  
  prometheusSpec:
    # Retention
    retention: 15d
    retentionSize: "45GB"
    
    # Storage
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    
    # Resources
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
    
    # Scrape interval
    scrapeInterval: 30s
    evaluationInterval: 30s
    
    # Service monitors
    serviceMonitorSelector: {}  # Select all ServiceMonitors
    podMonitorSelector: {}
    
    # External labels
    externalLabels:
      cluster: {{ .Values.global.namespace }}
      environment: {{ .Values.global.environment }}
    
    # Replicas for HA
    replicas: 2
    
    # Anti-affinity
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: prometheus
              topologyKey: kubernetes.io/hostname
    
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000
      seccompProfile:
        type: RuntimeDefault

# Grafana
grafana:
  enabled: true
  
  replicas: 1
  
  # Admin credentials (from External Secrets)
  admin:
    existingSecret: grafana-credentials
    userKey: admin-user
    passwordKey: admin-password
  
  # Persistence for dashboards
  persistence:
    enabled: true
    type: pvc
    storageClassName: longhorn
    size: 10Gi
  
  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 150Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Data sources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://monitoring-prometheus:9090
          access: proxy
          isDefault: true
  
  # Dashboard providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  
  # Pre-configured dashboards (from Grafana.com)
  dashboards:
    default:
      # Kubernetes cluster monitoring
      kubernetes-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      
      # Kubernetes pods
      kubernetes-pods:
        gnetId: 6417
        revision: 1
        datasource: Prometheus
      
      # MongoDB monitoring
      mongodb:
        gnetId: 2583
        revision: 2
        datasource: Prometheus
      
      # Node exporter
      node-exporter:
        gnetId: 1860
        revision: 31
        datasource: Prometheus
      
      # MinIO dashboard
      minio:
        gnetId: 13502
        revision: 10
        datasource: Prometheus
  
  # Grafana configuration
  grafana.ini:
    server:
      domain: grafana.{{ .Values.global.domain }}
      root_url: https://grafana.{{ .Values.global.domain }}
    
    auth:
      disable_login_form: false
    
    auth.anonymous:
      enabled: false
    
    security:
      admin_user: admin
      admin_password: ""  # From secret
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    fsGroup: 472
    seccompProfile:
      type: RuntimeDefault

# Alertmanager
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Storage
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    
    # Resources
    resources:
      requests:
        cpu: 50m
        memory: 50Mi
      limits:
        cpu: 200m
        memory: 256Mi
    
    # Replicas for HA
    replicas: 2
    
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000
      seccompProfile:
        type: RuntimeDefault
  
  # Configuration (from External Secrets or ConfigMap)
  config:
    global:
      resolve_timeout: 5m
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'null'
      
      routes:
        # Critical alerts ‚Üí Slack + PagerDuty
        - match:
            severity: critical
          receiver: slack-critical
          continue: true
        
        # Warning alerts ‚Üí Slack only
        - match:
            severity: warning
          receiver: slack-warnings
    
    receivers:
      - name: 'null'
      
      - name: slack-critical
        slack_configs:
          - api_url: ""  # From External Secrets
            channel: '#alerts-critical'
            title: 'üö® {{ .GroupLabels.alertname }}'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
      
      - name: slack-warnings
        slack_configs:
          - api_url: ""  # From External Secrets
            channel: '#alerts-warnings'
            title: '‚ö†Ô∏è  {{ .GroupLabels.alertname }}'

# Node Exporter (system metrics)
nodeExporter:
  enabled: true

# Kube State Metrics (K8s object metrics)
kubeStateMetrics:
  enabled: true

# Default rules (alerts)
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false  # Not needed for managed K8s
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false  # Not needed for managed K8s
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# Service monitors for additional targets
additionalServiceMonitors: []

# Installation instructions:
# helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
# helm install monitoring prometheus-community/kube-prometheus-stack \
#   -n monitoring --create-namespace \
#   -f helm-values.yaml
